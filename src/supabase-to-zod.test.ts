import { readFileSync } from 'node:fs';
import { join } from 'node:path';
import { fileURLToPath } from 'url';
import { describe, expect, it } from 'vitest';

import { generateContent, supabaseToZodOptionsSchema } from './supabase-to-zod';

const __dirname = fileURLToPath(new URL('.', import.meta.url));
const EXAMPLE_DIR = join(__dirname, '../example');

describe('supazod', () => {
  it('should generate schemas with specific schema names matching the example output', async () => {
    const typesFilePath = join(EXAMPLE_DIR, 'types.ts');
    const opts = supabaseToZodOptionsSchema.parse({
      input: typesFilePath,
      output: join(EXAMPLE_DIR, 'schema.ts'),
      typesOutput: join(EXAMPLE_DIR, 'schema.d.ts'),
      schema: ['public'],
      verbose: false,
    });

    const result = await generateContent(opts);

    expect(readFileSync(typesFilePath, 'utf-8')).toMatchInlineSnapshot(`
      "export type Json =
        | string
        | number
        | boolean
        | null
        | { [key: string]: Json }
        | Json[];

      export type Database = {
        public: {
          Tables: {
            users: {
              Row: {
                username: string;
                data: Json | null;
                age_range: unknown | null;
                catchphrase: unknown | null;
                status: Database['public']['Enums']['user_status'] | null;
                platform: Database["public"]["Enums"]["provider_slug"]
              };
              Insert: {
                username: string;
                data?: Json | null;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['public']['Enums']['user_status'] | null;
              };
              Update: {
                username?: string;
                data?: Json | null;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['public']['Enums']['user_status'] | null;
              };
              Relationships: [];
            };
          };
          Views: {
            non_updatable_view: {
              Row: {
                username: string | null;
              };
            };
          };
          Functions: {
            get_status: {
              Args: { name_param: string };
              Returns: Database['public']['Enums']['user_status'];
            };
          };
          Enums: {
            user_status: 'ONLINE' | 'OFFLINE';
            provider_slug:
              | "github"
              | "slack"
              | "discord"
              | "web"
              | "linear"
              | "jira"
              | "memory"
              | "dosu_app"
          };
        };
        schema_b: {
          Tables: {
            users: {
              Row: {
                username: string;
                data: Json | null;
                status: Database['public']['Enums']['user_status'] | null;
              };
              Insert: {
                username: string;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['schema_b']['Enums']['user_status'] | null;
              };
              Update: {
                data?: Json | null;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['schema_b']['Enums']['user_status'] | null;
              };
            };
          };
          Views: {
            non_updatable_view: {
              Row: {
                username: string | null;
              };
            };
          };
          Functions: {
            get_deployment_config_schema: {
              Args: Record<PropertyKey, never>;
              Returns: Json;
            };
            get_status: {
              Args: { name_param: string };
              Returns: Database['schema_b']['Enums']['user_status'];
            };
          };
          Enums: {
            user_status: 'ONLINE' | 'OFFLINE';
          };
        };
      }
      "
    `);

    expect(result?.rawSchemasFileContent).toMatchInlineSnapshot(`
      "/*
       * ==========================================
       * |          GENERATED BY SUPAZOD          |
       * ==========================================
       */

      import { z } from "zod";
      import { type Json } from "./types";

      export const publicProviderSlugSchema = z.union([z.literal("github"), z.literal("slack"), z.literal("discord"), z.literal("web"), z.literal("linear"), z.literal("jira"), z.literal("memory"), z.literal("dosu_app")]);

      export const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([z.string(), z.number(), z.boolean(), z.record(jsonSchema), z.array(jsonSchema)]).nullable());

      export const publicUserStatusSchema = z.union([z.literal("ONLINE"), z.literal("OFFLINE")]);

      export const publicUsersInsertSchema = z.object({
          username: z.string(),
          data: jsonSchema.optional().nullable(),
          age_range: z.unknown().optional().nullable(),
          catchphrase: z.unknown().optional().nullable(),
          status: publicUserStatusSchema.optional().nullable()
      });

      export const publicUsersUpdateSchema = z.object({
          username: z.string().optional(),
          data: jsonSchema.optional().nullable(),
          age_range: z.unknown().optional().nullable(),
          catchphrase: z.unknown().optional().nullable(),
          status: publicUserStatusSchema.optional().nullable()
      });

      export const publicNonUpdatableViewRowSchema = z.object({
          username: z.string().nullable()
      });

      export const publicGetStatusArgsSchema = z.object({
          name_param: z.string()
      });

      export const publicGetStatusReturnsSchema = publicUserStatusSchema;

      export const schemaBUserStatusSchema = z.union([z.literal("ONLINE"), z.literal("OFFLINE")]);

      export const publicUsersRowSchema = z.object({
          username: z.string(),
          data: jsonSchema.nullable(),
          age_range: z.unknown().nullable(),
          catchphrase: z.unknown().nullable(),
          status: publicUserStatusSchema.nullable(),
          platform: publicProviderSlugSchema
      });
      "
    `);

    expect(result?.rawTypesFileContent).toMatchInlineSnapshot(`
      "/*
       * ==========================================
       * |          GENERATED BY SUPAZOD          |
       * ==========================================
       */

      import { z } from "zod";
      import * as generated from "./../../../../../../example/schema";
      export type PublicProviderSlug = z.infer<typeof generated.publicProviderSlugSchema>;
      export type Json = z.infer<typeof generated.jsonSchema>;
      export type PublicUserStatus = z.infer<typeof generated.publicUserStatusSchema>;
      export type PublicUsersInsert = z.infer<typeof generated.publicUsersInsertSchema>;
      export type PublicUsersUpdate = z.infer<typeof generated.publicUsersUpdateSchema>;
      export type PublicNonUpdatableViewRow = z.infer<typeof generated.publicNonUpdatableViewRowSchema>;
      export type PublicGetStatusArgs = z.infer<typeof generated.publicGetStatusArgsSchema>;
      export type PublicGetStatusReturns = z.infer<typeof generated.publicGetStatusReturnsSchema>;
      export type SchemaBUserStatus = z.infer<typeof generated.schemaBUserStatusSchema>;
      export type PublicUsersRow = z.infer<typeof generated.publicUsersRowSchema>;
      "
    `);
  });

  it('should generate schemas with default schema names(all schemas) matching the example output', async () => {
    const typesFilePath = join(EXAMPLE_DIR, 'types.ts');
    const opts = supabaseToZodOptionsSchema.parse({
      input: typesFilePath,
      output: join(EXAMPLE_DIR, 'schema.ts'),
      typesOutput: join(EXAMPLE_DIR, 'schema.d.ts'),
      schema: [],
      verbose: false,
    });

    const result = await generateContent(opts);

    expect(readFileSync(typesFilePath, 'utf-8')).toMatchInlineSnapshot(`
      "export type Json =
        | string
        | number
        | boolean
        | null
        | { [key: string]: Json }
        | Json[];

      export type Database = {
        public: {
          Tables: {
            users: {
              Row: {
                username: string;
                data: Json | null;
                age_range: unknown | null;
                catchphrase: unknown | null;
                status: Database['public']['Enums']['user_status'] | null;
                platform: Database["public"]["Enums"]["provider_slug"]
              };
              Insert: {
                username: string;
                data?: Json | null;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['public']['Enums']['user_status'] | null;
              };
              Update: {
                username?: string;
                data?: Json | null;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['public']['Enums']['user_status'] | null;
              };
              Relationships: [];
            };
          };
          Views: {
            non_updatable_view: {
              Row: {
                username: string | null;
              };
            };
          };
          Functions: {
            get_status: {
              Args: { name_param: string };
              Returns: Database['public']['Enums']['user_status'];
            };
          };
          Enums: {
            user_status: 'ONLINE' | 'OFFLINE';
            provider_slug:
              | "github"
              | "slack"
              | "discord"
              | "web"
              | "linear"
              | "jira"
              | "memory"
              | "dosu_app"
          };
        };
        schema_b: {
          Tables: {
            users: {
              Row: {
                username: string;
                data: Json | null;
                status: Database['public']['Enums']['user_status'] | null;
              };
              Insert: {
                username: string;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['schema_b']['Enums']['user_status'] | null;
              };
              Update: {
                data?: Json | null;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['schema_b']['Enums']['user_status'] | null;
              };
            };
          };
          Views: {
            non_updatable_view: {
              Row: {
                username: string | null;
              };
            };
          };
          Functions: {
            get_deployment_config_schema: {
              Args: Record<PropertyKey, never>;
              Returns: Json;
            };
            get_status: {
              Args: { name_param: string };
              Returns: Database['schema_b']['Enums']['user_status'];
            };
          };
          Enums: {
            user_status: 'ONLINE' | 'OFFLINE';
          };
        };
      }
      "
    `);

    expect(result?.rawSchemasFileContent).toMatchInlineSnapshot(`
      "/*
       * ==========================================
       * |          GENERATED BY SUPAZOD          |
       * ==========================================
       */

      import { z } from "zod";
      import { type Json } from "./types";

      export const publicProviderSlugSchema = z.union([z.literal("github"), z.literal("slack"), z.literal("discord"), z.literal("web"), z.literal("linear"), z.literal("jira"), z.literal("memory"), z.literal("dosu_app")]);

      export const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([z.string(), z.number(), z.boolean(), z.record(jsonSchema), z.array(jsonSchema)]).nullable());

      export const publicUserStatusSchema = z.union([z.literal("ONLINE"), z.literal("OFFLINE")]);

      export const publicUsersInsertSchema = z.object({
          username: z.string(),
          data: jsonSchema.optional().nullable(),
          age_range: z.unknown().optional().nullable(),
          catchphrase: z.unknown().optional().nullable(),
          status: publicUserStatusSchema.optional().nullable()
      });

      export const publicUsersUpdateSchema = z.object({
          username: z.string().optional(),
          data: jsonSchema.optional().nullable(),
          age_range: z.unknown().optional().nullable(),
          catchphrase: z.unknown().optional().nullable(),
          status: publicUserStatusSchema.optional().nullable()
      });

      export const publicNonUpdatableViewRowSchema = z.object({
          username: z.string().nullable()
      });

      export const publicGetStatusArgsSchema = z.object({
          name_param: z.string()
      });

      export const publicGetStatusReturnsSchema = publicUserStatusSchema;

      export const schemaBUserStatusSchema = z.union([z.literal("ONLINE"), z.literal("OFFLINE")]);

      export const schemaBUsersRowSchema = z.object({
          username: z.string(),
          data: jsonSchema.nullable(),
          status: publicUserStatusSchema.nullable()
      });

      export const schemaBUsersInsertSchema = z.object({
          username: z.string(),
          age_range: z.unknown().optional().nullable(),
          catchphrase: z.unknown().optional().nullable(),
          status: schemaBUserStatusSchema.optional().nullable()
      });

      export const schemaBUsersUpdateSchema = z.object({
          data: jsonSchema.optional().nullable(),
          age_range: z.unknown().optional().nullable(),
          catchphrase: z.unknown().optional().nullable(),
          status: schemaBUserStatusSchema.optional().nullable()
      });

      export const schemaBNonUpdatableViewRowSchema = z.object({
          username: z.string().nullable()
      });

      export const schemaBGetDeploymentConfigSchemaArgsSchema = z.object({});

      export const schemaBGetDeploymentConfigSchemaReturnsSchema = jsonSchema;

      export const schemaBGetStatusArgsSchema = z.object({
          name_param: z.string()
      });

      export const schemaBGetStatusReturnsSchema = schemaBUserStatusSchema;

      export const publicUsersRowSchema = z.object({
          username: z.string(),
          data: jsonSchema.nullable(),
          age_range: z.unknown().nullable(),
          catchphrase: z.unknown().nullable(),
          status: publicUserStatusSchema.nullable(),
          platform: publicProviderSlugSchema
      });
      "
    `);

    expect(result?.rawTypesFileContent).toMatchInlineSnapshot(`
      "/*
       * ==========================================
       * |          GENERATED BY SUPAZOD          |
       * ==========================================
       */

      import { z } from "zod";
      import * as generated from "./../../../../../../example/schema";
      export type PublicProviderSlug = z.infer<typeof generated.publicProviderSlugSchema>;
      export type Json = z.infer<typeof generated.jsonSchema>;
      export type PublicUserStatus = z.infer<typeof generated.publicUserStatusSchema>;
      export type PublicUsersInsert = z.infer<typeof generated.publicUsersInsertSchema>;
      export type PublicUsersUpdate = z.infer<typeof generated.publicUsersUpdateSchema>;
      export type PublicNonUpdatableViewRow = z.infer<typeof generated.publicNonUpdatableViewRowSchema>;
      export type PublicGetStatusArgs = z.infer<typeof generated.publicGetStatusArgsSchema>;
      export type PublicGetStatusReturns = z.infer<typeof generated.publicGetStatusReturnsSchema>;
      export type SchemaBUserStatus = z.infer<typeof generated.schemaBUserStatusSchema>;
      export type SchemaBUsersRow = z.infer<typeof generated.schemaBUsersRowSchema>;
      export type SchemaBUsersInsert = z.infer<typeof generated.schemaBUsersInsertSchema>;
      export type SchemaBUsersUpdate = z.infer<typeof generated.schemaBUsersUpdateSchema>;
      export type SchemaBNonUpdatableViewRow = z.infer<typeof generated.schemaBNonUpdatableViewRowSchema>;
      export type SchemaBGetDeploymentConfigSchemaArgs = z.infer<typeof generated.schemaBGetDeploymentConfigSchemaArgsSchema>;
      export type SchemaBGetDeploymentConfigSchemaReturns = z.infer<typeof generated.schemaBGetDeploymentConfigSchemaReturnsSchema>;
      export type SchemaBGetStatusArgs = z.infer<typeof generated.schemaBGetStatusArgsSchema>;
      export type SchemaBGetStatusReturns = z.infer<typeof generated.schemaBGetStatusReturnsSchema>;
      export type PublicUsersRow = z.infer<typeof generated.publicUsersRowSchema>;
      "
    `);
  });

  it('should generate schemas with custom naming configuration', async () => {
    const typesFilePath = join(EXAMPLE_DIR, 'types.ts');
    const opts = supabaseToZodOptionsSchema.parse({
      input: typesFilePath,
      output: join(EXAMPLE_DIR, 'schema.ts'),
      typesOutput: join(EXAMPLE_DIR, 'schema.d.ts'),
      schema: ['public'],
      verbose: false,
      namingConfig: {
        tableOperationPattern: '{schema}_{table}_{operation}',
        enumPattern: '{schema}_{name}_enum',
        compositeTypePattern: '{schema}_{name}_type',
        functionArgsPattern: '{schema}_{function}_args',
        functionReturnsPattern: '{schema}_{function}_returns',
        capitalizeSchema: true,
        capitalizeNames: true,
        separator: '',
      },
    });

    const result = await generateContent(opts);

    // ts-to-zod converts our custom type names to camelCase + Schema suffix
    // So Public_Users_Insert becomes publicUsersInsertSchema
    expect(result?.rawSchemasFileContent).toContain('publicUsersInsertSchema');
    expect(result?.rawSchemasFileContent).toContain('publicUsersUpdateSchema');
    expect(result?.rawSchemasFileContent).toContain('publicUsersRowSchema');
    expect(result?.rawSchemasFileContent).toContain(
      'publicGetStatusArgsSchema',
    );
    expect(result?.rawSchemasFileContent).toContain(
      'publicGetStatusReturnsSchema',
    );

    // Check that the old double "Schema" pattern is not present
    expect(result?.rawSchemasFileContent).not.toContain('SchemaSchema');

    // Verify that our custom naming was applied at the TypeScript level
    // by checking that we don't have the default pattern
    expect(result?.rawSchemasFileContent).not.toContain(
      'publicUsersInsertSchemaSchema',
    );
  });
});
