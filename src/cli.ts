#!/usr/bin/env node

import { program } from 'commander';
import fsSync from 'node:fs';
import { join } from 'node:path';
import * as url from 'url';

import { loadConfig, parseCliNamingConfig } from './lib/config-loader';
import { defaultNamingConfig } from './lib/naming-config';
import supabaseToZod, { supabaseToZodOptionsSchema } from './supabase-to-zod';

const __dirname = url.fileURLToPath(new URL('.', import.meta.url));
const defaultPackageJsonPath = join(__dirname, 'package.json');
const packageJsonPath = fsSync.existsSync(defaultPackageJsonPath)
  ? defaultPackageJsonPath
  : join(__dirname, '../package.json');

const packageJson = JSON.parse(
  fsSync.readFileSync(packageJsonPath, {}).toString(),
);

program
  .name(packageJson.name)
  .version(packageJson.version)
  .option('-i, --input <input>', 'Path to the types generated by supabase cli')
  .option('-o, --output <output>', 'Path to the output file')
  .option(
    '-t, --types-output [types-output]',
    'Path to output inferred types file',
  )
  .option('-s, --schema [schema]', 'Specify schemas (comma-separated)', '')
  .option('-v, --verbose', 'Enable verbose logging')
  .option('--config <path>', 'Path to a Supazod config file')
  // Naming configuration options
  .option(
    '--table-operation-pattern <pattern>',
    'Pattern for table operations (e.g., {schema}{table}{operation})',
  )
  .option(
    '--table-schema-pattern <pattern>',
    'Pattern for table schema constants (e.g., {schema}{table}{operation})',
  )
  .option(
    '--enum-pattern <pattern>',
    'Pattern for enums (e.g., {schema}{name})',
  )
  .option(
    '--enum-schema-pattern <pattern>',
    'Pattern for enum schema constants (e.g., {schema}{name})',
  )
  .option(
    '--composite-type-pattern <pattern>',
    'Pattern for composite types (e.g., {schema}{name})',
  )
  .option(
    '--composite-type-schema-pattern <pattern>',
    'Pattern for composite type schema constants (e.g., {schema}{name})',
  )
  .option(
    '--function-args-pattern <pattern>',
    'Pattern for function args (e.g., {schema}{function}Args)',
  )
  .option(
    '--function-args-schema-pattern <pattern>',
    'Pattern for function arg schema constants (e.g., {schema}{function}Args)',
  )
  .option(
    '--function-returns-pattern <pattern>',
    'Pattern for function returns (e.g., {schema}{function}Returns)',
  )
  .option(
    '--function-returns-schema-pattern <pattern>',
    'Pattern for function return schema constants (e.g., {schema}{function}Returns)',
  )
  .option(
    '--capitalize-schema [boolean]',
    'Capitalize schema names (default: true)',
    (value) => value !== 'false',
  )
  .option(
    '--capitalize-names [boolean]',
    'Capitalize type names (default: true)',
    (value) => value !== 'false',
  )
  .option(
    '--separator [separator]',
    'Separator between name parts (default: empty)',
  )
  .parse(process.argv);

(async () => {
  try {
    // Load configuration from file
    const cliOptions = program.opts();

    const config = await loadConfig(process.cwd(), cliOptions.config);

    const {
      schema: schemaOptionRaw = '',
      config: _ignoredConfig,
      ...restOptions
    } = cliOptions as Record<string, any> & { schema?: string };

    // Parse CLI naming config
    const cliNamingConfig = parseCliNamingConfig(cliOptions);

    // Merge configurations: defaults < config file < CLI args
    const finalNamingConfig = {
      ...defaultNamingConfig,
      ...config.namingConfig,
      ...cliNamingConfig,
    };

    const schemaList = (schemaOptionRaw ?? '')
      .toString()
      .split(',')
      .map((s: string) => s.trim())
      .filter((s: string) => s.length);

    const opts = supabaseToZodOptionsSchema.parse({
      ...restOptions,
      schema: schemaList,
      namingConfig: finalNamingConfig,
    });

    await supabaseToZod(opts);
    process.exit();
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
})();
